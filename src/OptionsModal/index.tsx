import { Button, Form, Modal } from "react-bootstrap";
import { Options } from "../App";
import { OptionsRangeSlider } from "../OptionsRangeSlider";
import { useEffect, useState } from "react";

type OptionsModalProps = {
	show: boolean;
	handleCloseModal: () => void;
	options: Options;
	defaultOptions: Options;
	onUpdateOptions: (optionName: string, newValue: any) => void;
	onRestoreDefaultOptions: () => void;
};

export function OptionsModal({
	show,
	handleCloseModal,
	options,
	defaultOptions,
	onUpdateOptions,
	onRestoreDefaultOptions,
}: OptionsModalProps) {
	//this only controls whether the user should be notified that the option defaults are restored
	const [showDefaultsRestored, setShowDefaultsRestored] = useState(false);
	const [optionsAreDefault, setOptionsAreDefault] = useState(
		Object.keys(options).length === 0
	);
	useEffect(() => {
		setOptionsAreDefault(Object.keys(options).length === 0);
		if (showDefaultsRestored && Object.keys(options).length !== 0) {
			setShowDefaultsRestored(false);
		}
	}, [options]);
	return (
		<Modal
			show={show}
			onHide={() => {
				handleCloseModal();
				setShowDefaultsRestored(false);
			}}
		>
			<Modal.Header closeButton>
				<Modal.Title>Options</Modal.Title>
			</Modal.Header>
			<Modal.Body>
				<h5>Demo</h5>
				<Form>
					<Form.Check
						type={`checkbox`}
						id={`options-toggle-hideDemoPerm`}
						label={`Never show demo reminder`}
						//note that the "checked" prop can't be undefined (although that's falsy), or else this input will initially be considered uncontrolled by React
						checked={
							options.hideDemoPerm === true ||
							(options.hideDemoPerm === undefined &&
								defaultOptions.hideDemoPerm === true)
						}
						onChange={(e) => {
							onUpdateOptions("hideDemoPerm", e.target.checked);
						}}
					/>
				</Form>
				<hr />
				<h5>Notes</h5>
				<Form>
					<Form.Check
						type={`checkbox`}
						id={`options-modal-toggle-deleteNoteRequireConfirm`}
						label={`Require confirmation when deleting a note`}
						checked={
							(options.deleteNoteRequireConfirm === undefined &&
								defaultOptions.deleteNoteRequireConfirm === true) ||
							options.deleteNoteRequireConfirm === true
						}
						onChange={(e) => {
							onUpdateOptions("deleteNoteRequireConfirm", e.target.checked);
						}}
					/>
				</Form>
				<div className="mb-3"></div>
				<OptionsRangeSlider
					options={options}
					onUpdateOptions={onUpdateOptions}
					optionName="maxNoteTitleLength"
					defaultValue={defaultOptions["maxNoteTitleLength"]}
					minValue={30} //this is recommended to be no less than the longest note title generated by demo
					maxValue={100}
					textBeforeNumber="Max note title length: "
					textAfterNumber=" (this won't trim existing titles longer than the limit)"
				/>
				<hr />
				<h5>Tags</h5>
				<Form>
					<Form.Check
						type={`checkbox`}
						id={`options-modal-toggle-tagsOrderAffectNotes`}
						label={`Tags in notes are ordered (i.e. matches tags order in dropdown and modal)`}
						checked={
							(options.tagsOrderAffectNotes === undefined &&
								defaultOptions.tagsOrderAffectNotes === true) ||
							options.tagsOrderAffectNotes === true
						}
						onChange={(e) => {
							onUpdateOptions("tagsOrderAffectNotes", e.target.checked);
						}}
					/>
				</Form>
				<div className="mb-3"></div>
				<OptionsRangeSlider
					options={options}
					onUpdateOptions={onUpdateOptions}
					optionName="maxTagLabelLength"
					defaultValue={defaultOptions["maxTagLabelLength"]}
					minValue={20} //this is recommended to be no less than the longest tag generated by demo
					maxValue={40}
					textBeforeNumber="Max tag label length: "
					textAfterNumber=" (this won't trim tag labels longer than the limit)"
				/>
				<hr />
				<h5>Misc</h5>
				<Form>
					<Form.Check
						type={`checkbox`}
						id={`options-toggle-hideTooltips`}
						label={`Hide tooltips`}
						//note that the "checked" prop can't be undefined (although that's falsy), or else this input will initially be considered uncontrolled by React
						checked={
							(options.hideTooltips === undefined &&
								defaultOptions.hideTooltips === true) ||
							options.hideTooltips === true
						}
						onChange={(e) => {
							onUpdateOptions("hideTooltips", e.target.checked);
						}}
					/>
				</Form>
				<div className="mb-5"></div>
				<div
					className="d-grid gap-2" /* "d-grid" makes block-level (full-width) buttons */
				>
					<Button
						variant={optionsAreDefault ? "secondary" : "primary"}
						disabled={optionsAreDefault}
						onClick={() => {
							onRestoreDefaultOptions();
							setShowDefaultsRestored(true);
						}}
					>
						{optionsAreDefault
							? showDefaultsRestored
								? "Defaults Restored"
								: "Options Are Default"
							: "Restore Default Options"}
					</Button>
				</div>
			</Modal.Body>
		</Modal>
	);
}
